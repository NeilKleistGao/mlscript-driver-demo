import "./AST.mlsi"
export declare module MyProgram() {
  class Neg[A](expr: A)
  mixin EvalNeg() {
    super: {eval: 'a -> 'b}
    this: {eval: 'expr -> Int}
    fun eval: (Neg['expr] | Object & 'a & ~#Neg) -> (Int | 'b)
  }
  module MyLang {
    fun eval: (Neg['A] | Object & ~#Neg) -> Int
  }
  fun show: unit
  where
    'A <: Neg['A] | Object & ~#Neg
}
//| ╔══[ERROR] Unsupported parent specification
//| ║  l.11: 	module MyLang extends AST.EvalBase, EvalNeg
//| ╙──      	                      ^^^^^^^^^^^^
//| ╔══[ERROR] Type mismatch in type declaration:
//| ║  l.11: 	module MyLang extends AST.EvalBase, EvalNeg
//| ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//| ╟── Object of type `anything` does not have field 'eval'
//| ║  l.11: 	module MyLang extends AST.EvalBase, EvalNeg
//| ║        	                      ^
//| ╟── Note: constraint arises from field selection:
//| ║  l.8: 	    else super.eval(e)
//| ║       	         ^^^^^^^^^^
//| ╟── from reference:
//| ║  l.8: 	    else super.eval(e)
//| ╙──     	         ^^^^^
//| ╔══[ERROR] access to class member not yet supported
//| ║  l.14: 	  let program = AST.Add(AST.Lit(48), Neg(AST.Lit(6)))
//| ╙──      	                   ^^^^
//| ╔══[ERROR] access to class member not yet supported
//| ║  l.14: 	  let program = AST.Add(AST.Lit(48), Neg(AST.Lit(6)))
//| ╙──      	                           ^^^^
//| ╔══[ERROR] access to class member not yet supported
//| ║  l.14: 	  let program = AST.Add(AST.Lit(48), Neg(AST.Lit(6)))
//| ╙──      	                                            ^^^^
